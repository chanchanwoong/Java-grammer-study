<자바의 특징>

0. 실행 과정
    0.1 소스코드(.java) -> 컴파일러(javac) -> 바이트코드(.class) -> 클래스로더 -> 런타임 데이터 영역
        0.1.1 소스코드는 컴파일러를 통해 기계어로 번역된다. 또한, 이 과정에서 문법 검사가 실행된다.
        0.1.2 클래스 로더부터 JVM의 영역이다.
        0.1.3 런타임 데이터 영역은 5가지 영역으로 나뉜다.
            0.1.3.1 Method Area, Heap, Stack, PC Register, Native Method Stack
            0.1.3.2 Method Area : 모든 스레드가 공유되며, 클래스 정보, 변수 정보, static 변수가 저장된다.
            0.1.3.3 Heap : 모든 스레드 공유, 동적으로 생성된 객체가 저장되는 영역, new 연산자로 생성된 변수가 저장된다. 쉽게 소멸안된다.
                0.1.3.3.1 Person p = new Person("박찬웅", 26);
                0.1.3.3.2 p는 Stack에, Person("박찬웅", 26)은 Heap에 저장된다.
                0.1.3.3.3 Stack에는 간단한 주소만 저장(사이즈 이슈)을 해야하고, Heap에는 커다란 데이터를 저장한다.
            0.1.3.4 Stack : 지역변수나 메서드의 매개변수, 임시 변수, 메서드 정보가 저장된다.
            0.1.3.5 PC Register : 현재 수행중인 JVM의 명령어 주소를 저장하는 공간
            0.1.3.6 Native Method Stack : java가 아닌 다른 언어로 작성된 코드를 위한 공간

1. 운영체제에 독립적이다.
    1.1 JVM을 통해 자바로 개발된 프로그램은 다른 종류의 운영체제에 적용하기 위한 다른 노력이 필요없다.
        1.1.1 자바 운영프로그램은 운영체제나 하드웨어가 아닌 JVM하고만 통신하고 JVM이
            자바 응용프로그램으로부터 전달 받은 명령을 해당 운영체제가 이해할 수 있도록 변환하여 전달한다.
        1.1.2 자바로 작성된 프로그램은 운영체제에 독립적이지만 JVM은 운영체제에 종속적이어서
            썬에서는 여러 운영체제에 설치할 수 있는 서로 다른 버전의 JVM을 제공하고 있다.
        1.1.3 Java 애플리케이션 <-> JVM(윈도우용 or 리눅스용) <-> OS <-> 컴퓨터

2. 객체지향언어이다.
    2.1 객체지향개념의 특징 상속, 캡슐화, 다형성이 잘 적용된 순수한 객체지향언어이다.

3. 자동 메모리 관리가 가능하다.
    3.1 가비지컬렉터가 자동적으로 메모리 관리를 해준다.
        3.1.1 가비지는 프로그램 개발 과정 중 발생되는 유효하지 않은 메모리를 의미한다.
        3.1.2 JVM의 가비지 컬렉터가 불필요한 메모리를 자동으로 정리해준다.

4. 멀티쓰레드를 지원한다.
    4.1 자바 멀티쓰레드 프로그램은 시스템과 관계없이 구현 가능하다.
    4.2 관련된 라이브러리가 제공되어 구현이 쉽다.
    4.3 쓰레드에 대한 스케줄링을 자바 인터프리터가 담당한다.

5. 동적로딩을 지원한다.
    5.1 프로그램 실행 시, 모든 클래스가 로딩되지 않고 필요한 클래스를 로딩하여 사용할 수 있다.
    5.2 일부 클래스가 변경되어도 전체 애플리케이션을 다시 컴파일하지 않아도 된다.

6. 안전하다.
    6.1 모든 메모리 접근을 자바 시스템이 관리하여 안전하다.